{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["Panel","Collapse","g_var","loadPreference","m","v","localStorage","props","savedAddress","savedPort","form","Form","React","address","setAddress","port","setPort","publish","setPublish","received","setReceived","error","setError","buttonItemLayout","wrapperCol","span","offset","handleMessage","topic","payload","decodedPayload","Buffer","handleError","err","url","mqttHandler","mqtt","console","connect","size","title","extra","style","width","labelCol","layout","initialValues","ip","onFinish","data","label","name","type","htmlType","position","defaultActiveKey","header","key","App","useState","undefined","setData","counter","setCounter","connected","setConnected","margin","onClick","date","Date","time","getHours","getMinutes","getSeconds","subscribeTo","callbacks","onConnect","isConnected","onMessage","log","settings","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61f43c90.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button, Card, Collapse } from 'antd';\nimport mqtt from 'mqtt';\n\nconst { Panel } = Collapse;\n\nlet g_var = {};\n\nconst loadPreference = (m, v) => {\n  if (localStorage.getItem(m) === null || localStorage.getItem(m) === undefined) {\n    localStorage.setItem(m, v);\n  }\n  return localStorage.getItem(m);\n}\n\nexport default function MqttComponent(props) {\n  const savedAddress = loadPreference('rubenchoi-mqtt-address', '3.35.144.112');\n  const savedPort = loadPreference('rubenchoi-mqtt-port', '8006');\n\n  const [form] = Form.useForm();\n  const [address, setAddress] = React.useState(savedAddress);\n  const [port, setPort] = React.useState(savedPort);\n  const [publish, setPublish] = React.useState(undefined);\n  const [received, setReceived] = React.useState(undefined);\n  const [error, setError] = React.useState(undefined);\n\n  const formItemLayout = { labelCol: { span: 6 }, wrapperCol: { span: 18 } };\n  const buttonItemLayout = { wrapperCol: { span: 14, offset: 4 } };\n\n  const onFinish = (data) => {\n    setAddress(data.ip);\n    setPort(data.port);\n    localStorage.setItem('rubenchoi-mqtt-address', data.ip);\n    localStorage.setItem('rubenchoi-mqtt-port', data.port);\n  };\n\n  React.useEffect(() => {\n    const handleMessage = (topic, payload) => {\n      let decodedPayload = new Buffer.from(payload, 'base64').toString('utf-8');\n      setReceived(\"[\" + topic + \"] \" + decodedPayload);\n      props.callbacks.onMessage(topic, decodedPayload);\n    }\n\n    const handleError = (err) => {\n      setError(err);\n      props.callbacks.onConnect(false);\n    }\n\n    const connect = () => {\n      try {\n        const url = 'ws://' + address + ':' + port;\n        const mqttHandler = mqtt.connect(url);\n        mqttHandler.on('connect', () => {\n          console.log('MQTT Connected');\n          props.subscribeTo.forEach(topic => {\n            mqttHandler.subscribe(topic);\n          })\n          g_var.mqtt = mqttHandler;\n          props.callbacks.onConnect(true);\n        });\n        mqttHandler.on('disconnect', () => handleError('MQTT Disconnected'));\n        mqttHandler.on('error', (err) => handleError(err));\n        mqttHandler.on('message', handleMessage);\n      } catch (err) {\n        handleError(err);\n      }\n    }\n\n    connect();\n  }, [])\n\n  React.useEffect(() => {\n    try {\n      g_var.mqtt.publish(props.publish.topic, props.publish.payload);\n      setPublish(props.publish);\n    } catch (err) {\n      console.log('ERROR: cannot publish');\n    }\n  }, [props.publish])\n\n  return (\n    <>\n      {props.settings &&\n        <Card size=\"small\" title=\"Settings\" extra={'MQTT'} style={{ width: '50vw' }}>\n          <Form\n            {...formItemLayout}\n            layout={'horizontal'}\n            form={form}\n            initialValues={{\n              ip: address,\n              port: port\n            }}\n            onFinish={onFinish}\n          >\n            <Form.Item label=\"IP\" name=\"ip\">\n              <Input />\n            </Form.Item>\n            <Form.Item label=\"Port\" name=\"port\">\n              <Input />\n            </Form.Item>\n            <Form.Item {...buttonItemLayout}>\n              <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n            </Form.Item>\n          </Form>\n\n          {error && <div style={{ position: 'absolute' }}>{error}</div>}\n\n          {props.log && <>\n            <p>Log</p>\n            <Collapse defaultActiveKey={['1', '2']}>\n              <Panel header=\"Published Message\" key=\"1\">\n                {publish && <p>[{publish.topic}] {publish.payload}</p>}\n              </Panel>\n              <Panel header=\"Received Message\" key=\"2\">\n                <p>{received}</p>\n              </Panel>\n            </Collapse>\n          </>}\n        </Card>\n      }\n    </>\n  );\n};\n","import React from 'react'\n\nimport MqttComponent from '@rubenchoi/react-mqtt'\n\nconst App = () => {\n  const [data, setData] = React.useState(undefined);\n  const [counter, setCounter] = React.useState(1);\n  const [connected, setConnected] = React.useState('Connected');\n\n  const publish = () => {\n    const date = new Date();\n    const time = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n    const s = \"TestData-\" + (counter) + \" ---- \" + time;\n    setData({ topic: 'topic1', payload: s });\n    setCounter(counter + 1);\n  }\n\n  return (<>\n    <p>State: {connected}</p>\n    <button style={{ margin: '2em' }} onClick={publish}>Send Data</button>\n    {data && <span>[{data.topic}] {data.payload}</span>}\n    <MqttComponent\n      subscribeTo={[\n        'topic1', 'topic2'\n      ]}\n      publish={data}\n      callbacks={{\n        onConnect: (isConnected = true) => setConnected(isConnected ? \"Connected\" : \"Disconnected\"),\n        onMessage: (topic, payload) => {\n          console.log(\"onMessage: topic=\" + topic, payload);\n        }\n      }}\n      settings={true}\n      log={true}\n    />\n  </>)\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}